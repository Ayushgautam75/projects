# -*- coding: utf-8 -*-
"""Copy of TitanicModels.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qRfTzBL26j2Y31Zstk7SRCL8uc9DiSTr
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

df = sns.load_dataset("titanic")

df.head()

df.columns

df.info()

df.drop(["deck", "embark_town", "alive", "class", "who", "adult_male"], axis=1, inplace=True)

df.info()

df["age"].fillna(df["age"].mean(), inplace=True)

df.dropna(subset=["embarked"], inplace=True)

df.info()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df.head()

df['sex'] = le.fit_transform(df['sex'])
df["embarked"] = le.fit_transform(df["embarked"]) # S=2, C=0, Q=1

df = df.astype(int)

df.head()

X = df.drop("survived", axis=1)
y = df["survived"]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(X_train,y_train)

y_pred = model.predict(X_test)

y_pred

y_test

from sklearn.metrics import accuracy_score, confusion_matrix , classification_report

accuracy_score(y_test,y_pred)

confusion_matrix(y_test,y_pred)

print(classification_report(y_test,y_pred))

df

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.fit_transform(X_test)

from sklearn.neighbors import KNeighborsClassifier

knn_model = KNeighborsClassifier(n_neighbors= 5)
knn_model.fit(X_train_scaled,y_train)

y_pred_knn = knn_model.predict(X_test_scaled)

accuracy_score(y_test,y_pred_knn)

confusion_matrix(y_test,y_pred_knn)

print(classification_report(y_test,y_pred_knn))

from sklearn.naive_bayes import GaussianNB

model_NB = GaussianNB()

model_NB.fit(X_train,y_train)

y_pred_NB = model_NB.predict(X_test)

y_pred_NB

accuracy_score(y_test,y_pred_NB)

confusion_matrix(y_test,y_pred_NB)

print(classification_report(y_test,y_pred_NB))

from sklearn.tree import DecisionTreeClassifier

model_DT = DecisionTreeClassifier(random_state=42)

model_DT.fit(X_train_scaled,y_train)

y_pred_DT = model_DT.predict(X_test_scaled)

y_pred_DT

accuracy_score(y_test,y_pred_DT)

confusion_matrix(y_test,y_pred_DT)

print(classification_report(y_test,y_pred_DT))

from sklearn.svm import SVC

model_svm = SVC(kernel = 'linear')

model_svm.fit(X_train_scaled, y_train)

y_pred_svc = model_svm.predict(X_test_scaled)

accuracy_score(y_test,y_pred_svc)

confusion_matrix(y_test,y_pred_svc)

print(classification_report(y_test,y_pred_svc))

#now Lets see what cross validation can do

df

X = df.drop('survived',axis = 1)
y = df['survived']

from sklearn.model_selection import cross_val_score

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

scores = cross_val_score(model_svm,X_scaled,y,cv = 5,scoring= 'accuracy')

print(scores)

print(scores.mean())

"""#now lets cross validation"""

df

X = df.drop('survived', axis=1)
y = df["survived"]

from sklearn.model_selection import cross_val_score

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

scores = cross_val_score(model_svm, X_scaled, y,cv=5, scoring='accuracy')

print(scores)

print(scores.mean())

scores = cross_val_score(knn_model, X_scaled, y,cv=5, scoring='accuracy')

print(scores)

print(scores.mean())

scores = cross_val_score(model_svm, X_scaled, y,cv=5, scoring='accuracy')

print(scores)

print(scores.mean())

